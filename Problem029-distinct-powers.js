// https://projecteuler.net/problem=29
// Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

// 2^2=4, 2^3=8, 2^4=16, 2^5=32
// 3^2=9, 3^3=27, 3^4=81, 3^5=243
// 4^2=16, 4^3=64, 4^4=256, 4^5=1024
// 5^2=25, 5^3=125, 5^4=625, 5^5=3125
// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

// How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

// Completed within minutes, realising these are not really in strict difficulty order.

const distinctPowers = max => {
    let distinct = []
    for (let i = 2; i <= max; i++) {
        for (let j = 2; j <= max; j++) {
            sum = i**j
            distinct.includes(sum) ? null : distinct.push(sum)
        }
    }
    return distinct.length
}

distinctPowers(100)
// => 9220

// Due to the ease of this problem, I dug into it a bit more. 
// I changed line 21 to push duplicates into another array. 
// Looking at this duplicates array it was very cler that, a list of numbers 4^x show up. 
// i.e 16, 64, 256, 1024 and so on.
// Then the same happens for all of 4^x, 8^x, 9^x, 16^x, 25^x, 27^x, 32^x, 36^x, 49^x, 64^x, 81^x and 100^x. 
// What I see as the similarities between these numbers is that they're smallest common prime factors are duplicated at some point.
// 4 = 2**2
// 8 = 2**3
// 9 = 3**2
// 36 = 3**2 * 2**2.

